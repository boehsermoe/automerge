#!/usr/bin/env php
<?php

function includeIfExists(string $file): bool
{
    return file_exists($file) && include $file;
}

if (
    !includeIfExists(__DIR__ . '/../vendor/autoload.php') &&
    !includeIfExists(__DIR__ . '/../../../autoload.php') &&
    !includeIfExists(__DIR__ . '/../../../../../vendor/autoload.php')
) {
    fwrite(STDERR, 'Install dependencies using Composer.'.PHP_EOL);
    exit(1);
}

use Symfony\Component\Yaml\Yaml;

// --- STATE ---
$originalBranch = trim(shell_exec('git rev-parse --abbrev-ref HEAD'));
$tempBranch = null;
$tagName = null;

// Cleanup on exit: restore branch, delete temp branch and local tag
register_shutdown_function(function () use (&$originalBranch, &$tempBranch, &$tagName) {
    echo "\nüßπ Cleaning up...\n";

    if ($tagName) {
        echo "Deleting local tag '$tagName'...\n";
        shell_exec("git tag -d $tagName 2>/dev/null");
    }

    if ($tempBranch) {
        // Check if temp branch exists before deleting
        $branches = shell_exec("git branch --list $tempBranch");
        if (trim($branches) !== '') {
            shell_exec("git checkout $originalBranch 2>/dev/null");
            shell_exec("git branch -D $tempBranch 2>/dev/null");
            echo "üîÅ Restored branch: $originalBranch\n";
        }
    }
});

// --- CONFIG ---
$configFile = getcwd() . '/config.yaml';

// --- PRE-CHECKS ---
if (!file_exists($configFile)) {
    exit("‚ùå Config file '$configFile' not found.\n");
}
if (!shell_exec('which git')) {
    exit("‚ùå Git is not installed or not in PATH.\n");
}
if (trim(shell_exec('git status --porcelain'))) {
    exit("‚ùå Working directory not clean. Please commit or stash changes.\n");
}

// --- LOAD CONFIG ---
$config = Yaml::parseFile($configFile);
$envs = array_keys($config);

// --- PROMPT FOR ENVIRONMENT ---
echo "Select environment:\n";
foreach ($envs as $i => $env) {
    echo "  [$i] $env\n";
}
$choice = readline("Enter number: ");
if (!isset($envs[$choice])) {
    exit("‚ùå Invalid selection.\n");
}
$selectedEnv = $envs[$choice];
$envConfig = $config[$selectedEnv] ?? [];

if (empty($envConfig['branches']) || empty($envConfig['base'])) {
    exit("‚ùå Config for '$selectedEnv' must include both 'base' and 'branches'.\n");
}

$patterns = $envConfig['branches'];
$baseBranch = $envConfig['base'];

// --- FETCH REMOTES ---
echo "Fetching remote branches...\n";
shell_exec("git fetch --all");

// --- LIST REMOTE BRANCHES ---
$rawRemotes = explode("\n", trim(shell_exec("git branch -r")));
$remotes = [];

foreach ($rawRemotes as $line) {
    $line = trim($line);
    if ($line === '' || str_contains($line, '->')) continue;
    if (str_starts_with($line, 'origin/')) {
        $remotes[] = substr($line, strlen('origin/'));
    }
}

// --- MATCH PATTERNS ---
$branchesToMerge = [];
foreach ($patterns as $pattern) {
    $regex = '#^' . str_replace(['*', '.'], ['.*', '\.'], $pattern) . '$#';
    foreach ($remotes as $branch) {
        if (preg_match($regex, $branch)) {
            $branchesToMerge[$branch] = true;
        }
    }
}

if (empty($branchesToMerge)) {
    exit("‚ùå No matching remote branches found for environment '$selectedEnv'.\n");
}

echo "‚úÖ Branches to merge:\n";
foreach (array_keys($branchesToMerge) as $b) {
    echo "  - $b\n";
}

// --- CREATE TEMP BRANCH & TAG NAME ---
$timestamp = date('YmdHis');
$tempBranch = "automerge_tmp_{$selectedEnv}_{$timestamp}";

if (!isset($envConfig['tag_prefix'])) {
    $tagPrefix = 'automerge-';
} elseif ($envConfig['tag_prefix'] === false || $envConfig['tag_prefix'] === '') {
    $tagPrefix = '';
} else {
    $tagPrefix = $envConfig['tag_prefix'];
}
$tagName = $tagPrefix . "{$selectedEnv}-{$timestamp}";

// --- CREATE TEMP BRANCH ---
echo "Creating temporary branch '$tempBranch' from origin/{$baseBranch}...\n";
passthru("git checkout -b $tempBranch origin/{$baseBranch}", $code);
if ($code !== 0) {
    exit("‚ùå Failed to create branch from origin/{$baseBranch}.\n");
}

// --- MERGE MATCHING BRANCHES ---
foreach (array_keys($branchesToMerge) as $branch) {
    echo "Merging origin/$branch...\n";
    passthru("git merge --no-edit origin/$branch", $code);
    if ($code !== 0) {
        echo "‚ùå Merge conflict in '$branch'. Resolve manually.\n";
        exit(1);
    }
}

// --- CREATE & PUSH TAG ---
echo "Creating tag '$tagName'...\n";
shell_exec("git tag $tagName");
passthru("git push origin $tagName");

echo "‚úÖ Tag '$tagName' pushed to origin.\n";

// Script exits here, cleanup runs automatically

